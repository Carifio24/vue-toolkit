import { KeyboardControlSettings } from "../keyboard";
type Shape = {
    width: number;
    height: number;
};
declare const _default: import("vue").DefineComponent<{
    kcs: {
        type: typeof KeyboardControlSettings;
        default: KeyboardControlSettings;
    };
}, unknown, {
    fullscreenModeActive: boolean;
    resizeObserver: ResizeObserver | null;
    touchscreen: boolean;
    windowShape: Shape;
}, {
    fullscreenAvailable(): boolean;
}, {
    doZoom(zoomIn: boolean): void;
    doMove(x: number, y: number): void;
    onFullscreenEvent(): void;
    onResizeEvent(): void;
    blurActiveElement(): void;
}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
    wwtNamespace: {
        type: StringConstructor;
        default: string;
        required: true;
    };
    wwtFreestandingAssetBaseurl: StringConstructor;
}, unknown, unknown, {
    lookupImageset: () => (imagesetName: string) => import("@wwtelescope/engine").Imageset | null;
    findRADecForScreenPoint: () => (pt: {
        x: number;
        y: number;
    }) => {
        ra: number;
        dec: number;
    };
    findScreenPointForRADec: () => (pt: {
        ra: number;
        dec: number;
    }) => {
        x: number;
        y: number;
    };
    imagesetStateForLayer: () => (guidtext: string) => import("@wwtelescope/engine-pinia").ImageSetLayerState | null;
    activeImagesetLayerStates: () => import("@wwtelescope/engine-pinia").ImageSetLayerState[];
    imagesetForLayer: () => (guidtext: string) => import("@wwtelescope/engine").Imageset | null;
    layerForHipsCatalog: () => (name: string) => import("@wwtelescope/engine").SpreadSheetLayer | null;
    spreadsheetStateForHipsCatalog: () => (name: string) => import("@wwtelescope/engine").SpreadSheetLayerSettingsInterfaceRO | null;
    spreadSheetLayerById: () => (id: string) => import("@wwtelescope/engine").SpreadSheetLayer | null;
    spreadsheetStateById: () => (id: string) => import("@wwtelescope/engine").SpreadSheetLayerSettingsInterfaceRO | null;
    spreadSheetLayer: () => (catalog: import("@wwtelescope/engine-pinia").CatalogLayerInfo) => import("@wwtelescope/engine").SpreadSheetLayer | null;
    spreadsheetState: () => (catalog: import("@wwtelescope/engine-pinia").CatalogLayerInfo) => import("@wwtelescope/engine").SpreadSheetLayerSettingsInterfaceRO | null;
    wwtActiveLayers: () => string[];
    wwtAvailableImagesets: () => {
        url: string;
        name: string;
        type: import("@wwtelescope/engine-types").ImageSetType;
        id: string | null;
        description: string;
        extension: string;
    }[];
    wwtBackgroundImageset: () => {
        get_altUrl: () => string;
        set_altUrl: (url: string) => string;
        get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
        set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
        get_baseLevel: () => number;
        set_baseLevel: (bl: number) => number;
        get_baseTileDegrees: () => number;
        set_baseTileDegrees: (v: number) => number;
        get_bottomsUp: () => boolean;
        set_bottomsUp: (bu: boolean) => boolean;
        get_centerX: () => number;
        set_centerX: (cx: number) => number;
        get_centerY: () => number;
        set_centerY: (cy: number) => number;
        get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
        get_creditsText: () => string;
        set_creditsText: (ct: string) => string;
        get_creditsUrl: () => string;
        set_creditsUrl: (cu: string) => string;
        get_dataSetType: () => import("@wwtelescope/engine-types").ImageSetType;
        set_dataSetType: (st: import("@wwtelescope/engine-types").ImageSetType) => import("@wwtelescope/engine-types").ImageSetType;
        get_defaultSet: () => boolean;
        set_defaultSet: (ds: boolean) => boolean;
        get_demUrl: () => string;
        set_demUrl: (url: string) => string;
        get_elevationModel: () => boolean;
        set_elevationModel: (em: boolean) => boolean;
        get_extension: () => string;
        set_extension: (ext: string) => string;
        get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
        get_generic: () => boolean;
        set_generic: (g: boolean) => boolean;
        get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
        get_imageSetID: () => number;
        set_imageSetID: (id: number) => number;
        get_isCloudCommunityItem: () => boolean;
        get_isFolder: () => boolean;
        get_isImage: () => boolean;
        get_isTour: () => boolean;
        get_levels: () => number;
        set_levels: (levels: number) => number;
        get_meanRadius: () => number;
        set_meanRadius: (mr: number) => number;
        get_mercator: () => boolean;
        set_mercator: (m: boolean) => boolean;
        get_name: () => string;
        set_name: (name: string) => string;
        get_offsetX: () => number;
        set_offsetX: (ox: number) => number;
        get_offsetY: () => number;
        set_offsetY: (oy: number) => number;
        get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
        set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
        get_readOnly: () => boolean;
        get_referenceFrame: () => string;
        set_referenceFrame: (rf: string) => string;
        get_rotation: () => number;
        set_rotation: (r: number) => number;
        get_quadTreeTileMap: () => string;
        set_quadTreeTileMap: (qttm: string) => string;
        get_singleImage: () => boolean;
        set_singleImage: (si: boolean) => boolean;
        get_sparse: () => boolean;
        set_sparse: (s: boolean) => boolean;
        get_thumbnailUrl: () => string;
        set_thumbnailUrl: (url: string) => string;
        get_url: () => string;
        set_url: (url: string) => string;
        get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
        set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
        get_widthFactor: () => number;
        set_widthFactor: (f: number) => number;
        getHashCode: () => number;
    } | null;
    wwtCurrentTime: () => {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        getVarDate: () => VarDate;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    };
    wwtClockDiscontinuities: () => number;
    wwtClockRate: () => number;
    wwtDecRad: () => number;
    wwtForegroundImageset: () => {
        get_altUrl: () => string;
        set_altUrl: (url: string) => string;
        get_bandPass: () => import("@wwtelescope/engine-types").BandPass;
        set_bandPass: (bp: import("@wwtelescope/engine-types").BandPass) => import("@wwtelescope/engine-types").BandPass;
        get_baseLevel: () => number;
        set_baseLevel: (bl: number) => number;
        get_baseTileDegrees: () => number;
        set_baseTileDegrees: (v: number) => number;
        get_bottomsUp: () => boolean;
        set_bottomsUp: (bu: boolean) => boolean;
        get_centerX: () => number;
        set_centerX: (cx: number) => number;
        get_centerY: () => number;
        set_centerY: (cy: number) => number;
        get_children: () => import("@wwtelescope/engine-types").Thumbnail[];
        get_creditsText: () => string;
        set_creditsText: (ct: string) => string;
        get_creditsUrl: () => string;
        set_creditsUrl: (cu: string) => string;
        get_dataSetType: () => import("@wwtelescope/engine-types").ImageSetType;
        set_dataSetType: (st: import("@wwtelescope/engine-types").ImageSetType) => import("@wwtelescope/engine-types").ImageSetType;
        get_defaultSet: () => boolean;
        set_defaultSet: (ds: boolean) => boolean;
        get_demUrl: () => string;
        set_demUrl: (url: string) => string;
        get_elevationModel: () => boolean;
        set_elevationModel: (em: boolean) => boolean;
        get_extension: () => string;
        set_extension: (ext: string) => string;
        get_fitsProperties: () => import("@wwtelescope/engine").FitsProperties;
        get_generic: () => boolean;
        set_generic: (g: boolean) => boolean;
        get_hipsProperties: () => import("@wwtelescope/engine").HipsProperties | null;
        get_imageSetID: () => number;
        set_imageSetID: (id: number) => number;
        get_isCloudCommunityItem: () => boolean;
        get_isFolder: () => boolean;
        get_isImage: () => boolean;
        get_isTour: () => boolean;
        get_levels: () => number;
        set_levels: (levels: number) => number;
        get_meanRadius: () => number;
        set_meanRadius: (mr: number) => number;
        get_mercator: () => boolean;
        set_mercator: (m: boolean) => boolean;
        get_name: () => string;
        set_name: (name: string) => string;
        get_offsetX: () => number;
        set_offsetX: (ox: number) => number;
        get_offsetY: () => number;
        set_offsetY: (oy: number) => number;
        get_projection: () => import("@wwtelescope/engine-types").ProjectionType;
        set_projection: (pt: import("@wwtelescope/engine-types").ProjectionType) => import("@wwtelescope/engine-types").ProjectionType;
        get_readOnly: () => boolean;
        get_referenceFrame: () => string;
        set_referenceFrame: (rf: string) => string;
        get_rotation: () => number;
        set_rotation: (r: number) => number;
        get_quadTreeTileMap: () => string;
        set_quadTreeTileMap: (qttm: string) => string;
        get_singleImage: () => boolean;
        set_singleImage: (si: boolean) => boolean;
        get_sparse: () => boolean;
        set_sparse: (s: boolean) => boolean;
        get_thumbnailUrl: () => string;
        set_thumbnailUrl: (url: string) => string;
        get_url: () => string;
        set_url: (url: string) => string;
        get_wcsImage: () => import("@wwtelescope/engine").WcsImage | null;
        set_wcsImage: (w: import("@wwtelescope/engine").WcsImage | null) => import("@wwtelescope/engine").WcsImage | null;
        get_widthFactor: () => number;
        set_widthFactor: (f: number) => number;
        getHashCode: () => number;
    } | null;
    wwtForegroundOpacity: () => number;
    wwtImagesetLayers: () => {
        [guidtext: string]: import("@wwtelescope/engine-pinia").ImageSetLayerState;
    };
    wwtIsTourPlayerActive: () => boolean;
    wwtIsTourPlaying: () => boolean;
    wwtRARad: () => number;
    wwtRenderType: () => import("@wwtelescope/engine-types").ImageSetType;
    wwtRollRad: () => number;
    wwtShowWebGl2Warning: () => boolean;
    wwtSpreadSheetLayers: () => {
        [guidtext: string]: import("@wwtelescope/engine-helpers").SpreadSheetLayerState;
    };
    wwtTourCompletions: () => number;
    wwtTourRunTime: () => number | null;
    wwtTourStopStartTimes: () => number[];
    wwtTourTimecode: () => number;
    wwtZoomDeg: () => number;
}, {
    internalLinkToInstance: (wwt: import("@wwtelescope/engine-helpers").WWTInstance) => void;
    internalUnlinkFromInstance: () => void;
    internalUpdate: () => void;
    internalIncrementTourCompletions: () => void;
    applySetting: (setting: import("@wwtelescope/engine").EngineSetting) => void;
    setBackgroundImageByName: (imagesetName: string) => void;
    setForegroundImageByName: (imagesetName: string) => void;
    setForegroundOpacity: (opacity: number) => void;
    setupForImageset: (options: import("@wwtelescope/engine-helpers").SetupForImagesetOptions) => void;
    zoom: (factor: number) => void;
    move: (args: {
        x: number;
        y: number;
    }) => void;
    tilt: (args: {
        x: number;
        y: number;
    }) => void;
    setTime: (time: Date) => void;
    setClockRate: (rate: number) => void;
    setClockSync: (isSynced: boolean) => void;
    startTour: () => void;
    toggleTourPlayPauseState: () => void;
    setTourPlayerLeaveSettingsWhenStopped: (value: boolean) => void;
    seekToTourTimecode: (value: number) => void;
    viewAsTourXml: (name: string) => Promise<string | null>;
    waitForReady: () => Promise<void>;
    gotoRADecZoom: ({ raRad, decRad, zoomDeg, instant, rollRad }: import("@wwtelescope/engine-pinia").GotoRADecZoomParams) => Promise<void>;
    timeToRADecZoom: ({ raRad, decRad, zoomDeg, rollRad }: import("@wwtelescope/engine-pinia/dist/src/store").TimeToRADecZoomParams) => number;
    gotoTarget: (options: import("@wwtelescope/engine-helpers").GotoTargetOptions) => Promise<void>;
    setTrackedObject: (obj: import("@wwtelescope/engine-types").SolarSystemObjects) => void;
    loadTour: ({ url, play }: import("@wwtelescope/engine-pinia").LoadTourParams) => Promise<{
        tourRunTime: number | null;
        tourStopStartTimes: number[];
    }>;
    loadImageCollection: ({ url, loadChildFolders }: import("@wwtelescope/engine-pinia").LoadImageCollectionParams) => Promise<import("@wwtelescope/engine").Folder>;
    addImagesetToRepository: (imgset: import("@wwtelescope/engine").Imageset) => import("@wwtelescope/engine").Imageset;
    deleteLayer: (id: string | import("@wwtelescope/engine").Guid) => void;
    addImageSetLayer: (options: import("@wwtelescope/engine-helpers").AddImageSetLayerOptions) => Promise<import("@wwtelescope/engine").ImageSetLayer>;
    loadFitsLayer: (options: import("@wwtelescope/engine-helpers").LoadFitsLayerOptions) => Promise<import("@wwtelescope/engine").ImageSetLayer>;
    setImageSetLayerOrder: (options: import("@wwtelescope/engine-helpers").SetLayerOrderOptions) => void;
    stretchFitsLayer: (options: import("@wwtelescope/engine-helpers").StretchFitsLayerOptions) => void;
    setFitsLayerColormap: (options: import("@wwtelescope/engine-helpers").SetFitsLayerColormapOptions) => void;
    applyFitsLayerSettings: (options: import("@wwtelescope/engine-helpers").ApplyFitsLayerSettingsOptions) => void;
    createTableLayer: (options: import("@wwtelescope/engine-pinia").CreateTableLayerParams) => Promise<import("@wwtelescope/engine").SpreadSheetLayer>;
    applyTableLayerSettings: (options: import("@wwtelescope/engine-helpers").ApplyTableLayerSettingsOptions) => void;
    updateTableLayer: (options: import("@wwtelescope/engine-helpers").UpdateTableLayerOptions) => void;
    addCatalogHipsByName: (options: import("@wwtelescope/engine-helpers").AddCatalogHipsByNameOptions) => Promise<import("@wwtelescope/engine").Imageset>;
    getCatalogHipsDataInView: (options: import("@wwtelescope/engine-helpers").GetCatalogHipsDataInViewOptions) => Promise<import("@wwtelescope/engine").InViewReturnMessage>;
    removeCatalogHipsByName: (name: string) => void;
    addAnnotation: (ann: import("@wwtelescope/engine").Annotation) => void;
    removeAnnotation: (ann: import("@wwtelescope/engine").Annotation) => void;
    clearAnnotations: () => void;
    captureFrame: (options: import("@wwtelescope/engine-helpers").CaptureFrameOptions) => Promise<Blob | null>;
    captureVideo: (options: import("@wwtelescope/engine-helpers").CaptureVideoOptions) => ReadableStream<Blob | null>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    wwtNamespace: {
        type: StringConstructor;
        default: string;
        required: true;
    };
    wwtFreestandingAssetBaseurl: StringConstructor;
}>>, {
    wwtNamespace: string;
}, {}>, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    kcs: {
        type: typeof KeyboardControlSettings;
        default: KeyboardControlSettings;
    };
}>>, {
    kcs: KeyboardControlSettings;
}, {}>;
export default _default;
